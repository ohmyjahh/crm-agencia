version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: builder
    container_name: crm-backend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=crm_dev
      - DB_USER=crm_user
      - DB_PASS=crm_password
      - JWT_SECRET=dev_jwt_secret_change_in_production
      - SESSION_SECRET=dev_session_secret_change_in_production
      - CORS_ORIGIN=http://localhost:3001
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
      - backend-database:/app/database
    depends_on:
      - database
      - redis
    networks:
      - crm-network
    restart: unless-stopped
    command: npm run dev

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    container_name: crm-frontend-dev
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3000/api
      - REACT_APP_WS_URL=ws://localhost:3000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - crm-network
    restart: unless-stopped
    command: npm start

  # Database PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: crm-database-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crm_dev
      - POSTGRES_USER=crm_user
      - POSTGRES_PASSWORD=crm_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    container_name: crm-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - crm-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx para desenvolvimento (opcional)
  nginx-dev:
    image: nginx:alpine
    container_name: crm-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - crm-network
    restart: unless-stopped

  # Adminer para gerenciamento do banco
  adminer:
    image: adminer:latest
    container_name: crm-adminer-dev
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
    networks:
      - crm-network
    restart: unless-stopped

  # Redis Commander para gerenciamento do Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: crm-redis-commander-dev
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    networks:
      - crm-network
    restart: unless-stopped

networks:
  crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  backend-uploads:
    driver: local
  backend-logs:
    driver: local
  backend-database:
    driver: local